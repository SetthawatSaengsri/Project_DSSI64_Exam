#views.py

from django.shortcuts import render,redirect,get_object_or_404
from django.http import HttpResponse, JsonResponse, HttpResponseForbidden
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib.admin.views.decorators import staff_member_required
from django.contrib import messages
from django.forms import modelformset_factory
from django.views.decorators.csrf import csrf_exempt

from django.db.models import Q, Count
from django.utils import timezone
from django.utils.timezone import make_aware, localtime, now

from django.db.models import Sum
from .forms import *
from .models import *

import csv
import json
import base64
import pytz
import pandas as pd
from io import BytesIO
from datetime import datetime, timedelta
import math

import qrcode
import qrcode.image.pil
from PIL import Image

def index_view(request):
    if request.method == 'POST':
        form = StaffRegistrationForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            messages.success(request, 'Staff registration successful.')
            return redirect('index_view')  # After successful registration, stay on the index page
        else:
            messages.error(request, 'Please correct the errors below.')
    else:
        form = StaffRegistrationForm()

        schools = StaffProfile.objects.values_list('school_name', flat=True).distinct()
    return render(request, 'app/index.html', {'form': form, 'schools': schools})


def login_user(request):
    if request.method == 'POST':
        email = request.POST['email']
        password = request.POST['password']
        school_name = request.POST.get('school_name')

        try:
            if User.objects.filter(email=email, is_superuser=True).exists():
                user = User.objects.get(email=email)
            else:
                user = User.objects.get(email=email, school_name=school_name)
        except User.DoesNotExist:
            user = None

        if user and user.check_password(password):
            # Check if user is active (approved by admin)
            if not user.is_active:
                messages.error(request, '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô')
                return redirect('index_view')

            login(request, user)
            if user.is_superuser:
                return redirect('dashboard_admin')  # Redirect to admin dashboard
            elif user.is_student:
                return redirect('dashboard_student')
            elif user.is_teacher:
                return redirect('dashboard_teacher')
            elif user.is_staff:
                return redirect('dashboard_staff')
            else:
                return redirect('index_view')
        else:
            messages.error(request, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')

    schools = StaffProfile.objects.values_list('school_name', flat=True).distinct()
    return render(request, 'app/index.html', {'schools': schools})


@login_required
def logout_user(request):
    logout(request)
    return redirect('index_view')


def is_staff_user(user):
    return user.is_staff

def register_staff(request):
    if request.method == 'POST':
        form = StaffRegistrationForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Staff registration successful.')
            return redirect('dashboard_staff')
    else:
        form = StaffRegistrationForm()
    return render(request, 'app/register_staff.html', {'form': form})

@login_required
def scanner(request):
    return render(request, 'app/teacher/scanner.html')

##################################################################################################################################################################
@staff_member_required
def dashboard_admin(request):
    teacher_count = TeacherProfile.objects.count()
    student_count = StudentProfile.objects.count()
    subject_count = ExamSubject.objects.count()

    return render(request, 'app/admin/dashboard_admin.html', {
        'teacher_count': teacher_count,
        'student_count': student_count,
        'subject_count': subject_count,
    })

@staff_member_required
def verify_staff_registration(request):
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    unverified_staff = User.objects.filter(is_staff=True, is_active=False)  # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥

    return render(request, 'app/admin/verify_staff_registration.html', {
        'unverified_staff': unverified_staff
    })

@staff_member_required
def verify_staff_registration_action(request, staff_id):
    staff_user = get_object_or_404(User, id=staff_id)

    # ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ is_active ‡πÄ‡∏õ‡πá‡∏ô True
    if staff_user.is_staff and not staff_user.is_active:
        staff_user.is_active = True  # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        staff_user.save()

        messages.success(request, '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß!')
    else:
        messages.error(request, '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏î‡πâ')

    return redirect('verify_staff_registration')

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£
def cancel_staff_registration(request, staff_id):
    staff_user = get_object_or_404(User, id=staff_id)

    # ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    if staff_user.is_staff and not staff_user.is_active:
        staff_user.delete()
        messages.success(request, '‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!')
    else:
        messages.error(request, '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏î‡πâ')

    return redirect('verify_staff_registration')

@staff_member_required
def manage_users(request):
    school_filter = request.GET.get('school')
    if school_filter:
        users = User.objects.filter(school_name=school_filter).order_by('id')
    else:
        users = User.objects.all().order_by('id')
    
    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á)
    schools = User.objects.exclude(school_name__isnull=True).exclude(school_name="").values_list('school_name', flat=True).distinct()
    
    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
    teachers = users.filter(is_teacher=True)
    students = users.filter(is_student=True)
    # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤ "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà" ‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ is_staff=True ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà superuser
    staff = users.filter(is_staff=True, is_superuser=False)
    
    context = {
        'schools': schools,
        'school_filter': school_filter,
        'teachers': teachers,
        'students': students,
        'staff': staff,
    }
    return render(request, 'app/admin/manage_users.html', context)

@staff_member_required
def edit_user(request, user_id):
    """ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå """
    user_instance = get_object_or_404(User, id=user_id)
    if request.method == 'POST':
        form = UserEditForm(request.POST, instance=user_instance)
        if form.is_valid():
            form.save()
            messages.success(request, "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            return redirect('manage_users')
        else:
            messages.error(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    else:
        form = UserEditForm(instance=user_instance)
    return render(request, 'app/admin/edit_user.html', {'form': form, 'user_instance': user_instance})

@staff_member_required
def delete_user(request, user_id):
    """ ‡∏•‡∏ö‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö """
    user_instance = get_object_or_404(User, id=user_id)
    if request.method == 'POST':
        user_instance.delete()
        messages.success(request, "‡∏•‡∏ö‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        return redirect('manage_users')
    return render(request, 'app/admin/delete_user.html', {'user_instance': user_instance})

##################################################################################################################################################################

@staff_member_required
@login_required
def dashboard_staff(request):
    school_name = request.user.school_name

    teacher_count = TeacherProfile.objects.filter(user__school_name=school_name).count()
    student_count = StudentProfile.objects.filter(user__school_name=school_name).count()
    subject_count = ExamSubject.objects.filter(invigilator__school_name=school_name).count()

    overview_cards = [
        {"label": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏π", "count": teacher_count, "color": "indigo", "icon": "üë®‚Äçüè´"},
        {"label": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "count": student_count, "color": "emerald", "icon": "üéì"},
        {"label": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤", "count": subject_count, "color": "pink", "icon": "üìö"},
    ]

    class_list = StudentProfile.objects.filter(user__school_name=school_name).values_list('student_class', flat=True).distinct()
    year_list = ExamSubject.objects.filter(invigilator__school_name=school_name).values_list('academic_year', flat=True).distinct()

    attendance_data = {
        "all": {
            "on_time": 0,
            "late": 0,
            "absent": 0,
            "total_students": student_count,
            "total_teachers": teacher_count,
            "total_subjects": subject_count,
        }
    }

    for class_name in class_list:
        students = StudentProfile.objects.filter(student_class=class_name, user__school_name=school_name)
        student_ids = students.values_list('id', flat=True)

        attendance_data[class_name] = {
            "on_time": 0,
            "late": 0,
            "absent": 0,
            "total_students": students.count(),
            "total_subjects": ExamSubject.objects.filter(students__student_class=class_name, invigilator__school_name=school_name).distinct().count(),
            "total_teachers": teacher_count,
        }

        records = Attendance.objects.filter(student_id__in=student_ids).values("status").annotate(count=Count("id"))
        for record in records:
            status_key = record["status"]
            attendance_data[class_name][status_key] += record["count"]
            attendance_data["all"][status_key] += record["count"]

        for year in year_list:
            subjects = ExamSubject.objects.filter(
                students__student_class=class_name,
                academic_year=year,
                invigilator__school_name=school_name
            ).distinct()

            students_in_year = StudentProfile.objects.filter(
                student_class=class_name,
                user__school_name=school_name
            )
            student_ids = students_in_year.values_list("id", flat=True)
            key = f"{class_name}-{year}"

            attendance_data[key] = {
                "on_time": 0,
                "late": 0,
                "absent": 0,
                "total_students": students_in_year.count(),
                "total_teachers": teacher_count,
                "total_subjects": subjects.count(),
            }

            if subjects.exists():
                records = Attendance.objects.filter(
                    student_id__in=student_ids,
                    subject__academic_year=year
                ).values("status").annotate(count=Count("id"))
                for record in records:
                    status_key = record["status"]
                    attendance_data[key][status_key] += record["count"]
            else:
                attendance_data[key]["on_time"] = 0
                attendance_data[key]["late"] = 0
                attendance_data[key]["absent"] = 0

    for key in attendance_data:
        attendance_data[key].setdefault("on_time", 0)
        attendance_data[key].setdefault("late", 0)
        attendance_data[key].setdefault("absent", 0)
        attendance_data[key].setdefault("total_teachers", teacher_count)
        attendance_data[key].setdefault("total_students", 0)
        attendance_data[key].setdefault("total_subjects", 0)

    context = {
        "school_name": school_name,
        "class_list": class_list,
        "year_list": year_list,
        "attendance_data": attendance_data,
        "overview_cards": overview_cards,
    }

    return render(request, "app/staff/dashboard_staff.html", context)



def import_csv(request):
    if request.method == 'POST':
        file = request.FILES.get('file')
        role = request.POST.get('role')

        if not file:
            messages.error(request, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î')
            return redirect('import_csv')

        try:
            data = pd.read_csv(file) if file.name.endswith('.csv') else pd.read_excel(file)

            for _, row in data.iterrows():
                username = row['Username']
                email = row['Email']
                school_name = request.user.school_name

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ email ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if User.objects.filter(email=email).exists():
                    messages.warning(request, f"‡∏≠‡∏µ‡πÄ‡∏°‡∏• {email} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                    continue

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡πÅ‡∏•‡∏∞ school_name ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if User.objects.filter(username=username, school_name=school_name).exists():
                    messages.warning(request, f"‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {username} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô {school_name}")
                    continue

                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
                user = User.objects.create_user(
                    username=username,
                    first_name=row['First Name'],
                    last_name=row['Last Name'],
                    email=email,
                    password=row['Password'],
                    is_student=(role == 'student'),
                    is_teacher=(role == 'teacher'),
                    school_name=school_name
                )

                if role == 'student':
                    StudentProfile.objects.create(
                        user=user,
                        student_id=row['Student ID'],
                        no_student=row.get('No Student', ''),
                        student_class=row['Student Class']
                    )
                elif role == 'teacher':
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö teacher_id ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
                    if TeacherProfile.objects.filter(teacher_id=row['Teacher ID'], school_name=school_name).exists():
                        messages.warning(request, f"‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏£‡∏π {row['Teacher ID']} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô {school_name}")
                        continue

                    TeacherProfile.objects.create(
                        user=user,
                        teacher_id=row['Teacher ID'],
                        school_name=school_name
                    )

            messages.success(request, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå')
        except Exception as e:
            messages.error(request, f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}')

    return render(request, 'app/staff/import_csv.html')

@login_required
def import_exam_subjects_csv(request):
    if request.method == 'POST':
        file = request.FILES.get('file')
        if not file:
            messages.error(request, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î')
            return redirect('import_exam_subjects_csv')

        imported_count = 0
        try:
            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á staff ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
            school_name = request.user.school_name
 
            # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠ Excel
            if file.name.endswith('.csv'):
                raw_data = file.read()
                detected = chardet.detect(raw_data)
                encoding = detected.get("encoding", "utf-8")
                from io import StringIO
                decoded_data = raw_data.decode(encoding)
                df = pd.read_csv(StringIO(decoded_data))
            elif file.name.endswith(('.xls', '.xlsx')):
                df = pd.read_excel(file)
            else:
                messages.error(request, '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠ Excel ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
                return redirect('import_exam_subjects_csv')

            for _, row in df.iterrows():
                required_fields = [
                    'Subject_Name', 'Subject_Code', 'Academic_Year',
                    'Exam_Date', 'Start_Time', 'End_Time',
                    'Room', 'Invigilator', 'Student_Class'
                ]
                if not all(str(row.get(field)).strip() for field in required_fields):
                    messages.warning(request, f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {row.get('Subject_Name', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤')}")
                    continue

                # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ö
                exam_date = pd.to_datetime(row['Exam_Date'], errors='coerce').date()

                # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏≠‡∏ö
                def get_time(value):
                    if isinstance(value, datetime):
                        return value.time()
                    elif isinstance(value, time):
                        return value
                    else:
                        return pd.to_datetime(value, errors='coerce').time()

                start_time = get_time(row['Start_Time'])
                end_time = get_time(row['End_Time'])

                start_datetime = timezone.make_aware(datetime.combine(exam_date, start_time), timezone=thai_tz)
                end_datetime = timezone.make_aware(datetime.combine(exam_date, end_time), timezone=thai_tz)

                room = row['Room']

                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö "‡∏´‡πâ‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡πÄ‡∏ß‡∏•‡∏≤" ‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                if ExamSubject.objects.filter(
                    room=room, exam_date=exam_date, school_name=school_name
                ).filter(start_time__lt=end_datetime, end_time__gt=start_datetime).exists():
                    messages.error(request, f"‚ùå ‡∏´‡πâ‡∏≠‡∏á {room} ‡∏ã‡πâ‡∏≥‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≠‡∏ö")
                    continue

                # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ (‡πÉ‡∏™‡πà school_name)
                subject = ExamSubject(
                    subject_name=row['Subject_Name'],
                    subject_code=row['Subject_Code'],
                    academic_year=row['Academic_Year'],
                    exam_date=exam_date,
                    start_time=start_datetime,
                    end_time=end_datetime,
                    room=room,
                    school_name=school_name  # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
                )

                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏π‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
                try:
                    invigilator = TeacherProfile.objects.get(teacher_id=str(row['Invigilator']).strip(), school_name=school_name)
                    busy = ExamSubject.objects.filter(
                        invigilator=invigilator, exam_date=exam_date, school_name=school_name
                    ).filter(start_time__lt=end_datetime, end_time__gt=start_datetime).exists()
                    if busy:
                        messages.error(request, f"‚ùå ‡∏Ñ‡∏£‡∏π {invigilator.user.get_full_name()} ‡∏ã‡πâ‡∏≥‡πÄ‡∏ß‡∏•‡∏≤")
                        continue
                    subject.invigilator = invigilator
                except TeacherProfile.DoesNotExist:
                    messages.warning(request, f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏£‡∏π‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö: {row['Invigilator']}")
                    continue

                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏π‡∏™‡∏≥‡∏£‡∏≠‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
                sec_id = str(row.get('Secondary_Invigilator', '')).strip()
                if sec_id:
                    try:
                        sec_teacher = TeacherProfile.objects.get(teacher_id=sec_id, school_name=school_name)
                        subject.secondary_invigilator = sec_teacher
                    except TeacherProfile.DoesNotExist:
                        messages.warning(request, f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á")

                # ‚úÖ ‡∏î‡∏∂‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                students = StudentProfile.objects.filter(
                    student_class=row['Student_Class'],
                    user__school_name=school_name
                )

                subject.save()
                subject.students.set(students)
                imported_count += 1

            messages.success(request, f"‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß: {imported_count} ‡∏ß‡∏¥‡∏ä‡∏≤")

        except Exception as e:
            messages.error(request, f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

        return redirect('import_exam_subjects_csv')

    return render(request, 'app/staff/import_exam_subjects_csv.html')


@login_required
def school_members(request):
    if not request.user.is_staff:
        return HttpResponse("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ", status=403)

    school_name = request.user.school_name
    students = StudentProfile.objects.filter(user__school_name=school_name).select_related('user').order_by('student_class', 'user__last_name')
    teachers = TeacherProfile.objects.filter(user__school_name=school_name).select_related('user').order_by('user__last_name')

    students_by_class = {}
    for student in students:
        student_class = student.student_class if student.student_class else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
        if student_class not in students_by_class:
            students_by_class[student_class] = []
        students_by_class[student_class].append(student)

    return render(request, 'app/staff/school_members.html', {
        'school_name': school_name,
        'students_by_class': students_by_class,
        'teachers': teachers
    })

thai_tz = pytz.timezone('Asia/Bangkok')

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô
def exam_subjects_staff(request):
    if not request.user.is_staff:
        return HttpResponse("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ", status=403)

    school_name = request.user.school_name
    subjects = ExamSubject.objects.filter(invigilator__school_name=school_name).select_related('invigilator')

    # ‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    classes = StudentProfile.objects.filter(user__school_name=school_name).values_list('student_class', flat=True).distinct()
    classes = sorted(classes, key=lambda x: (int(x.split('/')[0].replace('‡∏°.', '')), int(x.split('/')[1])))

    # ‡∏î‡∏∂‡∏á‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    academic_years = subjects.values_list('academic_year', flat=True).distinct().order_by('-academic_year')

    # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å dropdown
    selected_class = request.GET.get('student_class', 'all')
    selected_year = request.GET.get('academic_year', 'all')
    selected_term = request.GET.get('term', 'all')

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô
    if selected_class != 'all' and selected_class:
        subjects = subjects.filter(students__student_class=selected_class)

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    if selected_year != 'all' and selected_year:
        subjects = subjects.filter(academic_year=selected_year)

    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡∏≠‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    if selected_year != 'all' and selected_class != 'all':
        terms = subjects.filter(academic_year=selected_year, students__student_class=selected_class).values_list('term', flat=True).distinct()
    else:
        terms = [1, 2, 3]  # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏ó‡∏≠‡∏°

    subjects = subjects.distinct()

    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ: ‡∏™‡∏£‡πâ‡∏≤‡∏á student_classes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ subject
    for subject in subjects:
        # ‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ
        student_classes = subject.students.values_list('student_class', flat=True).distinct()
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô list ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
        subject.student_classes = sorted(list(set(student_classes)))

    return render(request, 'app/staff/exam_subjects_staff.html', {
        'school_name': school_name,
        'subjects': subjects,
        'classes': classes,
        'selected_class': selected_class,
        'academic_years': academic_years,
        'selected_year': selected_year,
        'terms': terms,
        'selected_term': selected_term,
    })

@login_required
def select_exam_subject(request):
    # ‡∏î‡∏∂‡∏á‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    school_name = request.user.school_name

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á (‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
    subjects = ExamSubject.objects.filter(students__user__school_name=school_name).distinct()

    # ‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    grades = StudentProfile.objects.filter(user__school_name=school_name).values_list('student_class', flat=True).distinct()

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤
    for subject in subjects:
        subject.grades = list(subject.students.values_list('student_class', flat=True).distinct())

    return render(request, 'app/staff/select_exam_subject.html', {
        'subjects': subjects,
        'grades': grades
    })

@login_required
def exam_detail(request, subject_id):
    subject = get_object_or_404(ExamSubject, id=subject_id)

    teachers = TeacherProfile.objects.filter(invigilated_exams=subject).select_related('user')
    students = StudentProfile.objects.filter(exam_subjects=subject).select_related('user').order_by('student_class', 'user__last_name')

    # Assign seat numbers based on the order
    for idx, student in enumerate(students, start=1):
        student.seat_number = idx  # Assign sequential seat numbers
        student.save()

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
    attendance_records = Attendance.objects.filter(subject=subject)
    
    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ student_id ‡πÄ‡∏õ‡πá‡∏ô key
    attendance_dict = {record.student.id: record for record in attendance_records}

    if request.method == "POST":
        student_id = request.POST.get("student_id")
        new_status = request.POST.get("status")

        if student_id and new_status:
            student = get_object_or_404(StudentProfile, id=student_id)
            attendance, created = Attendance.objects.get_or_create(student=student, subject=subject)
            attendance.status = new_status
            attendance.checkin_time = now()
            attendance.save()
            messages.success(request, "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‚úÖ")
            return redirect('exam_detail', subject_id=subject.id)

    return render(request, 'app/staff/exam_detail.html', {
        'subject': subject,
        'students': students,
        'teachers': teachers,
        'attendance_dict': attendance_dict,  # ‚úÖ ‡∏™‡πà‡∏á dictionary ‡πÑ‡∏õ‡∏¢‡∏±‡∏á template
        'status_choices': ['on_time', 'late', 'absent'],  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    })

@staff_member_required
def add_exam_room(request):
    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
    if request.method == 'POST':
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
        if 'add_building' in request.POST:
            building_form = BuildingForm(request.POST)
            room_form = ExamRoomForm()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
            
            if building_form.is_valid():
                building_form.save()
                messages.success(request, "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                return redirect('add_exam_room')
            else:
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
                for field in building_form:
                    for error in field.errors:
                        messages.error(request, f"{field.label}: {error}")
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≠‡∏ö
        elif 'add_room' in request.POST:
            room_form = ExamRoomForm(request.POST)
            building_form = BuildingForm()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡πà‡∏≤
            
            if room_form.is_valid():
                room_form.save()
                messages.success(request, "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                return redirect('add_exam_room')
            else:
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
                for field in room_form:
                    for error in field.errors:
                        messages.error(request, f"{field.label}: {error}")
    else:
        # GET request - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏õ‡∏•‡πà‡∏≤
        room_form = ExamRoomForm()
        building_form = BuildingForm()

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    total_buildings = Building.objects.count()
    total_rooms = ExamRoom.objects.count()
    total_capacity = ExamRoom.objects.aggregate(Sum('capacity'))['capacity__sum'] or 0
    
    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown
    buildings = Building.objects.all().order_by('code')

    context = {
        'room_form': room_form,
        'building_form': building_form,
        'buildings': buildings,
        'total_buildings': total_buildings,
        'total_rooms': total_rooms,
        'total_capacity': total_capacity,
    }

    return render(request, 'app/staff/add_exam_room.html', context)


def find_available_room(exam_date, start_time, end_time, school_name):
    all_rooms = ExamRoom.objects.all()
    used_rooms = ExamSubject.objects.filter(
        exam_date=exam_date,
        start_time__lt=end_time,
        end_time__gt=start_time,
        school_name=school_name
    ).values_list('room_id', flat=True)
    return all_rooms.exclude(id__in=used_rooms).first() 

@staff_member_required
def list_exam_rooms(request):
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    buildings = Building.objects.all().prefetch_related('rooms').order_by('code')
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
    building_stats = []
    for building in buildings:
        rooms = building.rooms.all()
        total_capacity = sum(room.capacity for room in rooms)
        building_stats.append({
            'building': building,
            'room_count': rooms.count(),
            'total_capacity': total_capacity,
            'rooms': rooms
        })
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
    total_buildings = buildings.count()
    total_rooms = ExamRoom.objects.count()
    total_capacity = ExamRoom.objects.aggregate(Sum('capacity'))['capacity__sum'] or 0
    
    context = {
        'building_stats': building_stats,
        'total_buildings': total_buildings,
        'total_rooms': total_rooms,
        'total_capacity': total_capacity,
    }
    
    return render(request, 'app/staff/list_exam_rooms.html', context)

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
@staff_member_required
def delete_building(request, building_id):
    if request.method == 'POST':
        building = get_object_or_404(Building, id=building_id)
        building_name = building.name
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if building.rooms.exists():
            messages.error(request, f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ {building_name} ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≠‡∏ö‡∏≠‡∏¢‡∏π‡πà")
        else:
            building.delete()
            messages.success(request, f"‚úÖ ‡∏•‡∏ö‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ {building_name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    
    return redirect('list_exam_rooms')


# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≠‡∏ö
@staff_member_required
def delete_exam_room(request, room_id):
    if request.method == 'POST':
        room = get_object_or_404(ExamRoom, id=room_id)
        room_name = f"{room.building.name} ‡∏´‡πâ‡∏≠‡∏á {room.name}"
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if ExamSubject.objects.filter(room=room).exists():
            messages.error(request, f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö {room_name} ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö")
        else:
            room.delete()
            messages.success(request, f"‚úÖ ‡∏•‡∏ö {room_name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    
    return redirect('list_exam_rooms')   

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
@staff_member_required
def edit_building(request, building_id):
    building = get_object_or_404(Building, id=building_id)
    
    if request.method == 'POST':
        form = BuildingForm(request.POST, instance=building)
        if form.is_valid():
            form.save()
            messages.success(request, f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ {building.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            return redirect('list_exam_rooms')
    else:
        form = BuildingForm(instance=building)
    
    return render(request, 'app/staff/edit_building.html', {
        'form': form,
        'building': building
    })


# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≠‡∏ö
@staff_member_required
def edit_exam_room(request, room_id):
    room = get_object_or_404(ExamRoom, id=room_id)
    
    if request.method == 'POST':
        form = ExamRoomForm(request.POST, instance=room)
        if form.is_valid():
            form.save()
            messages.success(request, f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡πâ‡∏≠‡∏á {room.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            return redirect('list_exam_rooms')
    else:
        form = ExamRoomForm(instance=room)
    
    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown
    buildings = Building.objects.all().order_by('code')
    
    return render(request, 'app/staff/edit_exam_room.html', {
        'form': form,
        'room': room,
        'buildings': buildings
    })

@login_required
def building_detail(request, building_id):
    building = get_object_or_404(Building, id=building_id)
    rooms = ExamRoom.objects.filter(building=building)
    return render(request, 'app/staff/building_detail.html', {'building': building, 'rooms': rooms})

THAI_TZ = pytz.timezone('Asia/Bangkok')

# ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå views.py - ‡πÄ‡∏û‡∏¥‡πà‡∏° debug ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô add_exam_subject_enhanced

@login_required
def add_exam_subject_enhanced(request):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
    ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ timezone + ‡πÄ‡∏û‡∏¥‡πà‡∏° debug
    """
    if request.method == 'POST':
        print("=== POST REQUEST DEBUG ===")
        
        form = ExamSubjectForm(request.POST, user=request.user)
        
        if not form.is_valid():
            print("=== FORM ERRORS ===")
            print(f"Form errors: {form.errors}")
            
            # ‡πÅ‡∏™‡∏î‡∏á error ‡πÅ‡∏ï‡πà‡∏•‡∏∞ field
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f"‚ùå {field}: {error}")
            
            return render(request, 'app/staff/add_exam_subject_enhanced.html', {'form': form})
        
        # ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            cleaned_data = form.cleaned_data
            exam_date = cleaned_data['exam_date']
            start_time = cleaned_data.get('start_time')  # datetime object ‡∏à‡∏≤‡∏Å clean()
            end_time = cleaned_data.get('end_time')      # datetime object ‡∏à‡∏≤‡∏Å clean()
            room_assignment_type = cleaned_data['room_assignment_type']
            selected_class = cleaned_data['student_class']
            school_name = request.user.school_name
            
            print(f"=== CLEANED DATA ===")
            print(f"exam_date: {exam_date}")
            print(f"start_time: {start_time}")
            print(f"end_time: {end_time}")
            print(f"room_assignment_type: {room_assignment_type}")
            print(f"selected_class: {selected_class}")
            print(f"school_name: {school_name}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏°‡∏µ school_name ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not school_name:
                messages.error(request, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
                return render(request, 'app/staff/add_exam_subject_enhanced.html', {'form': form})
            
            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            students = StudentProfile.objects.filter(
                student_class=selected_class,
                user__school_name=school_name
            )
            student_count = students.count()
            print(f"üìö ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô {selected_class}: {student_count} ‡∏Ñ‡∏ô")
            
            if student_count == 0:
                messages.error(request, f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô {selected_class}")
                return render(request, 'app/staff/add_exam_subject_enhanced.html', {'form': form})
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤
            existing_subject = ExamSubject.objects.filter(
                subject_code=cleaned_data['subject_code'],
                school_name=school_name,
                academic_year=cleaned_data['academic_year'],
                term=cleaned_data['term']
            ).first()
            
            if existing_subject:
                messages.error(request, f"‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤ {cleaned_data['subject_code']} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ {cleaned_data['academic_year']} ‡πÄ‡∏ó‡∏≠‡∏° {cleaned_data['term']}")
                return render(request, 'app/staff/add_exam_subject_enhanced.html', {'form': form})
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏π
            invigilator = cleaned_data['invigilator']
            print(f"üë®‚Äçüè´ invigilator: {invigilator}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏π‡∏ß‡πà‡∏≤‡∏á (‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
            teacher_busy = ExamSubject.objects.filter(
                Q(invigilator=invigilator) | Q(secondary_invigilator=invigilator),
                school_name=school_name,
                exam_date=exam_date,
            ).exists()
            
            if teacher_busy:
                messages.error(request, f"‚ùå ‡∏Ñ‡∏£‡∏π {invigilator.user.get_full_name()} ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß")
                return render(request, 'app/staff/add_exam_subject_enhanced.html', {'form': form})
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≠‡∏ö
            selected_room = None
            room_message = ""
            
            if room_assignment_type == 'auto':
                print("ü§ñ Auto room assignment")
                # ‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                available_rooms = ExamRoom.objects.filter(capacity__gte=student_count)
                used_rooms = ExamSubject.objects.filter(
                    exam_date=exam_date,
                    school_name=school_name
                ).values_list('room_id', flat=True)
                
                available_room = available_rooms.exclude(id__in=used_rooms).order_by('capacity').first()
                
                if not available_room:
                    messages.error(request, f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô {student_count} ‡∏Ñ‡∏ô")
                    return render(request, 'app/staff/add_exam_subject_enhanced.html', {'form': form})
                
                selected_room = available_room
                room_message = f"‡∏à‡∏±‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: {available_room}"
                
            else:  # manual
                print("üéØ Manual room assignment")
                selected_room = cleaned_data.get('room')
                
                if not selected_room:
                    messages.error(request, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≠‡∏ö")
                    return render(request, 'app/staff/add_exam_subject_enhanced.html', {'form': form})
                
                if selected_room.capacity < student_count:
                    messages.error(request, f"‚ùå ‡∏´‡πâ‡∏≠‡∏á {selected_room} ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏ {selected_room.capacity} ‡∏Ñ‡∏ô ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô {student_count} ‡∏Ñ‡∏ô")
                    return render(request, 'app/staff/add_exam_subject_enhanced.html', {'form': form})
                
                room_message = f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏≠‡∏á: {selected_room}"
            
            print(f"üè´ Selected room: {selected_room}")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å subject ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà commit ‡∏Å‡πà‡∏≠‡∏ô
            subject = form.save(commit=False)
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            subject.school_name = school_name
            subject.room = selected_room
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ QR expiration time
            if end_time:
                if hasattr(end_time, 'time'):
                    subject.qr_expiration = end_time.time()
                else:
                    subject.qr_expiration = end_time
            
            print(f"=== SAVING SUBJECT ===")
            print(f"Final subject data:")
            print(f"  exam_date: {subject.exam_date}")
            print(f"  start_time: {subject.start_time}")
            print(f"  end_time: {subject.end_time}")
            print(f"  school_name: {subject.school_name}")
            print(f"  room: {subject.room}")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            subject.save()
            subject.students.set(students)
            
            print(f"‚úÖ Subject saved with ID: {subject.id}")
            
            messages.success(request, f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ '{subject.subject_name}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ({room_message})")
            return redirect('exam_subjects_staff')
            
        except Exception as e:
            print(f"‚ùå Exception occurred: {str(e)}")
            import traceback
            traceback.print_exc()
            messages.error(request, f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            return render(request, 'app/staff/add_exam_subject_enhanced.html', {'form': form})
    
    else:
        print("=== GET REQUEST ===")
        form = ExamSubjectForm(user=request.user)
    
    return render(request, 'app/staff/add_exam_subject_enhanced.html', {'form': form})

def _get_capacity_suggestions(student_count, exam_date, start_time, end_time, school_name):
    """‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"""
    suggestions = []
    
    # ‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    largest_room = ExamRoom.objects.order_by('-capacity').first()
    if largest_room:
        suggestions.append(f"üí° ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {largest_room} (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏ {largest_room.capacity} ‡∏Ñ‡∏ô)")
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    avg_capacity = ExamRoom.objects.aggregate(avg_cap=models.Avg('capacity'))['avg_cap'] or 30
    required_rooms = math.ceil(student_count / avg_capacity)
    suggestions.append(f"üí° ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {required_rooms} ‡∏´‡πâ‡∏≠‡∏á ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô {student_count} ‡∏Ñ‡∏ô")
    
    # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
    suggestions.append("üí° ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≠‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤")
    
    return suggestions

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
def _is_teacher_busy_naive(teacher, exam_date, start_datetime, end_datetime, school_name, is_secondary=False):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏π‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - ‡πÉ‡∏ä‡πâ naive datetime"""
    if is_secondary:
        busy_check = ExamSubject.objects.filter(
            Q(secondary_invigilator=teacher) | Q(invigilator=teacher),
            school_name=school_name,
            exam_date=exam_date
        )
    else:
        busy_check = ExamSubject.objects.filter(
            Q(invigilator=teacher) | Q(secondary_invigilator=teacher),
            school_name=school_name,
            exam_date=exam_date
        )
    
    # ‚úÖ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏î‡πâ‡∏ß‡∏¢ time ‡πÅ‡∏ó‡∏ô datetime
    return busy_check.filter(
        start_time__time__lt=end_datetime.time(),
        end_time__time__gt=start_datetime.time()
    ).exists()


def _find_available_room_naive(exam_date, start_datetime, end_datetime, school_name, student_count=None):
    """‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î - ‡πÉ‡∏ä‡πâ naive datetime"""
    used_rooms_ids = ExamSubject.objects.filter(
        school_name=school_name,
        exam_date=exam_date,
        start_time__time__lt=end_datetime.time(),
        end_time__time__gt=start_datetime.time()
    ).values_list('room__id', flat=True)
    
    available_rooms = ExamRoom.objects.exclude(id__in=used_rooms_ids)
    
    if student_count:
        available_rooms = available_rooms.filter(capacity__gte=student_count)
    
    available_room = available_rooms.order_by('capacity').first()
    
    if available_room:
        building_name = available_room.building.name if available_room.building else "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£"
        print(f"‚úÖ ‡∏à‡∏±‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: {building_name} ‡∏´‡πâ‡∏≠‡∏á {available_room.name} (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏ {available_room.capacity} ‡∏Ñ‡∏ô, ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô {student_count or '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏Ñ‡∏ô)")
    else:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {student_count} ‡∏Ñ‡∏ô ‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ {start_datetime.time()} - {end_datetime.time()}")
    
    return available_room


def _is_room_busy_naive(room, exam_date, start_datetime, end_datetime, school_name):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - ‡πÉ‡∏ä‡πâ naive datetime"""
    is_busy = ExamSubject.objects.filter(
        room=room,
        school_name=school_name,
        exam_date=exam_date,
        start_time__time__lt=end_datetime.time(),
        end_time__time__gt=start_datetime.time()
    ).exists()
    
    if is_busy:
        conflicting_subjects = ExamSubject.objects.filter(
            room=room,
            school_name=school_name,
            exam_date=exam_date,
            start_time__time__lt=end_datetime.time(),
            end_time__time__gt=start_datetime.time()
        )
        print(f"‚ùå ‡∏´‡πâ‡∏≠‡∏á {room} ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢:")
        for subject in conflicting_subjects:
            print(f"   - {subject.subject_name} ({subject.start_time.strftime('%H:%M')} - {subject.end_time.strftime('%H:%M')})")
    
    return is_busy


# AJAX endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
@login_required
def get_rooms_by_building(request):
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
    building_id = request.GET.get('building_id')
    if building_id:
        try:
            rooms = ExamRoom.objects.filter(building_id=building_id).order_by('name')
            room_data = []
            for room in rooms:
                room_data.append({
                    'id': room.id,
                    'name': room.name,
                    'capacity': room.capacity,
                    'full_name': f"{room.building.name} ‡∏´‡πâ‡∏≠‡∏á {room.name}"
                })
            return JsonResponse({'rooms': room_data, 'success': True})
        except Exception as e:
            return JsonResponse({'rooms': [], 'success': False, 'error': str(e)})
    return JsonResponse({'rooms': [], 'success': False, 'error': 'No building ID provided'})

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á
@login_required
def check_room_availability(request):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    if request.method == 'POST':
        data = json.loads(request.body)
        room_id = data.get('room_id')
        exam_date = data.get('exam_date')
        start_time = data.get('start_time')
        end_time = data.get('end_time')
        
        try:
            room = ExamRoom.objects.get(id=room_id)
            exam_date_obj = datetime.strptime(exam_date, '%Y-%m-%d').date()
            start_datetime = timezone.make_aware(
                datetime.combine(exam_date_obj, datetime.strptime(start_time, '%H:%M').time()),
                timezone=thai_tz
            )
            end_datetime = timezone.make_aware(
                datetime.combine(exam_date_obj, datetime.strptime(end_time, '%H:%M').time()),
                timezone=thai_tz
            )
            
            is_busy = _is_room_busy(room, exam_date_obj, start_datetime, end_datetime, request.user.school_name)
            
            # ‡∏´‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            conflicting_subjects = ExamSubject.objects.filter(
                room=room,
                school_name=request.user.school_name,
                exam_date=exam_date_obj,
                start_time__lt=end_datetime,
                end_time__gt=start_datetime
            )
            
            conflict_details = []
            for subject in conflicting_subjects:
                conflict_details.append({
                    'subject_name': subject.subject_name,
                    'subject_code': subject.subject_code,
                    'start_time': subject.start_time.strftime('%H:%M'),
                    'end_time': subject.end_time.strftime('%H:%M')
                })
            
            return JsonResponse({
                'available': not is_busy,
                'room_name': str(room),
                'conflicts': conflict_details
            })
            
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=400)
    
    return JsonResponse({'error': 'Invalid request method'}, status=405)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≠‡∏ö
@login_required
def get_room_statistics(request):
    """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≠‡∏ö"""
    total_rooms = ExamRoom.objects.count()
    total_buildings = Building.objects.count()
    
    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    today = timezone.now().date()
    rooms_in_use_today = ExamSubject.objects.filter(
        exam_date=today,
        school_name=request.user.school_name
    ).values_list('room_id', flat=True).distinct().count()
    
    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    exams_today = ExamSubject.objects.filter(
        exam_date=today,
        school_name=request.user.school_name
    ).count()
    
    return JsonResponse({
        'total_rooms': total_rooms,
        'total_buildings': total_buildings,
        'rooms_in_use_today': rooms_in_use_today,
        'exams_today': exams_today,
        'room_utilization_percentage': round((rooms_in_use_today / total_rooms * 100) if total_rooms > 0 else 0, 2)
    })

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
@login_required
def suggest_rooms(request):
    """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"""
    if request.method == 'POST':
        data = json.loads(request.body)
        student_class = data.get('student_class')
        exam_date = data.get('exam_date')
        start_time = data.get('start_time')
        end_time = data.get('end_time')
        
        try:
            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô
            student_count = StudentProfile.objects.filter(
                student_class=student_class,
                user__school_name=request.user.school_name
            ).count()
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
            exam_date_obj = datetime.strptime(exam_date, git add .
                datetime.combine(exam_date_obj, datetime.strptime(start_time, '%H:%M').time()),
                timezone=thai_tz
            )
            end_datetime = timezone.make_aware(
                datetime.combine(exam_date_obj, datetime.strptime(end_time, '%H:%M').time()),
                timezone=thai_tz
            )
            
            # ‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
            used_rooms_ids = ExamSubject.objects.filter(
                school_name=request.user.school_name,
                exam_date=exam_date_obj,
                start_time__lt=end_datetime,
                end_time__gt=start_datetime
            ).values_list('room_id', flat=True)
            
            available_rooms = ExamRoom.objects.exclude(id__in=used_rooms_ids).filter(
                capacity__gte=student_count
            ).order_by('capacity')
            
            suggestions = []
            for room in available_rooms[:5]:  # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 5 ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏£‡∏Å
                efficiency = round((student_count / room.capacity * 100), 2)
                suggestions.append({
                    'id': room.id,
                    'name': room.name,
                    'building': room.building.name,
                    'capacity': room.capacity,
                    'efficiency': efficiency,
                    'full_name': str(room)
                })
            
            return JsonResponse({
                'suggestions': suggestions,
                'student_count': student_count,
                'recommended_capacity': student_count + 5  # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏© 5 ‡∏Ñ‡∏ô
            })
            
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=400)
    
    return JsonResponse({'error': 'Invalid request method'}, status=405)

@login_required
def delete_exam_subject(request, subject_id):
    if request.method == 'POST':
        subject = get_object_or_404(ExamSubject, id=subject_id)
        subject.delete()
        messages.success(request, f"‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ {subject.subject_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    else:
        messages.error(request, "‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ POST ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
    return redirect('exam_subjects_staff')

@login_required
def edit_exam_subject(request, subject_id):
    subject = get_object_or_404(ExamSubject, id=subject_id, invigilator__school_name=request.user.school_name)
    thai_tz = pytz.timezone('Asia/Bangkok')  # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢

    if request.method == 'POST':
        form = ExamSubjectForm(request.POST, instance=subject, user=request.user)
        if form.is_valid():
            subject = form.save(commit=False)

            # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
            subject.start_time = timezone.make_aware(form.cleaned_data['start_time'], timezone=thai_tz)
            subject.end_time = timezone.make_aware(form.cleaned_data['end_time'], timezone=thai_tz)

            # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà
            selected_class = form.cleaned_data['student_class']
            students = StudentProfile.objects.filter(
                student_class=selected_class,
                user__school_name=request.user.school_name
            )

            subject.save()
            subject.students.set(students)  # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            subject.save()

            # ‚úÖ Debug Log
            print(f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏¥‡∏ä‡∏≤: {subject.subject_name}, ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà: {selected_class}, ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: {list(students.values_list('user__username', flat=True))}")

            messages.success(request, f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ {subject.subject_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            return redirect('exam_subjects_staff')
        else:
            messages.error(request, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            print("‚ùå ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", form.errors)  # ‚úÖ Debug error
    else:
        form = ExamSubjectForm(instance=subject, user=request.user)

    return render(request, 'app/staff/edit_exam_subject.html', {
        'form': form,
        'subject': subject
    })

@login_required
def generate_qr_code(request, subject_id):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß"""
    subject = get_object_or_404(ExamSubject, id=subject_id)
    
    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
    if not (request.user.is_staff or 
            (request.user.is_teacher and hasattr(request.user, 'teacher_profile') and 
             (subject.invigilator == request.user.teacher_profile or 
              subject.secondary_invigilator == request.user.teacher_profile))):
        messages.error(request, "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á QR Code ‡∏ô‡∏µ‡πâ")
        return redirect('exam_subjects_staff')
    
    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ
    student_classes = list(subject.students.values_list('student_class', flat=True).distinct())
    subject.student_classes = sorted(student_classes)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QR Code
    qr_url = request.build_absolute_uri(f"/exam/confirm_exam_entry/?subject_id={subject_id}")
    
    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥
    import time
    timestamp = int(time.time())
    qr_url += f"&t={timestamp}"
    
    try:
        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÅ‡∏•‡∏∞‡∏Ñ‡∏°‡∏ä‡∏±‡∏î
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_M,
            box_size=12,
            border=4,
        )
        qr.add_data(qr_url)
        qr.make(fit=True)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û QR Code
        img = qr.make_image(fill_color="black", back_color="white")
        
        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå
        try:
            img = img.resize((400, 400), Image.Resampling.LANCZOS)
        except AttributeError:
            try:
                img = img.resize((400, 400), Image.LANCZOS)
            except AttributeError:
                img = img.resize((400, 400), Image.ANTIALIAS)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
        buffer = BytesIO()
        img.save(buffer, format="PNG", optimize=True, quality=95)
        img_base64 = base64.b64encode(buffer.getvalue()).decode("utf-8")
        
    except Exception as e:
        print(f"QR Code generation error: {e}")
        # ‡πÉ‡∏ä‡πâ QR Code ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
        qr = qrcode.QRCode(error_correction=qrcode.constants.ERROR_CORRECT_L)
        qr.add_data(qr_url)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        
        buffer = BytesIO()
        img.save(buffer, format="PNG")
        img_base64 = base64.b64encode(buffer.getvalue()).decode("utf-8")
    
    # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤ - ‡πÉ‡∏ä‡πâ timezone ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    thai_tz = pytz.timezone('Asia/Bangkok')
    utc_tz = pytz.UTC
    
    # ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô UTC ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
    now_utc = timezone.now()  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô UTC
    now_time = now_utc.astimezone(thai_tz)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
    
    print(f"üïê Current time (UTC): {now_utc}")
    print(f"üïê Current time (Thai): {now_time}")
    print(f"üìÖ Exam date: {subject.exam_date}")
    print(f"‚è∞ Start time field: {subject.start_time} (type: {type(subject.start_time)})")
    print(f"‚è∞ End time field: {subject.end_time} (type: {type(subject.end_time)})")
    
    # ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    try:
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô datetime object (‡∏°‡∏µ timezone info ‡πÅ‡∏•‡πâ‡∏ß)
        if hasattr(subject.start_time, 'astimezone'):
            exam_start_time = subject.start_time.astimezone(thai_tz)
            print(f"‚úÖ Start time already datetime: {exam_start_time}")
        else:
            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á naive datetime ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ pytz localize ‡πÅ‡∏ó‡∏ô make_aware
            naive_start = datetime.combine(subject.exam_date, subject.start_time)
            exam_start_time = thai_tz.localize(naive_start)
            print(f"‚úÖ Start time localized: {exam_start_time}")
            
        if hasattr(subject.end_time, 'astimezone'):
            exam_end_time = subject.end_time.astimezone(thai_tz)
            print(f"‚úÖ End time already datetime: {exam_end_time}")
        else:
            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á naive datetime ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ pytz localize ‡πÅ‡∏ó‡∏ô make_aware
            naive_end = datetime.combine(subject.exam_date, subject.end_time)
            exam_end_time = thai_tz.localize(naive_end)
            print(f"‚úÖ End time localized: {exam_end_time}")
            
    except Exception as e:
        print(f"‚ùå Time conversion error: {e}")
        # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏ö‡∏ß‡∏Å 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        exam_start_time = now_time
        exam_end_time = now_time + timedelta(hours=2)
        print(f"‚ö†Ô∏è Using fallback times: {exam_start_time} - {exam_end_time}")
    
    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
    exam_date_today = now_time.date()
    is_past_exam = subject.exam_date < exam_date_today
    
    if is_past_exam:
        print(f"‚ö†Ô∏è TESTING MODE: This is a past exam ({subject.exam_date} vs {exam_date_today})")
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡∏¢‡∏∑‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
        qr_expiry_time = now_time + timedelta(hours=24)
        print(f"üß™ Extended QR expiry for testing: {qr_expiry_time}")
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
        testing_start_time = now_time - timedelta(minutes=10)  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≠‡∏ö 10 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
        testing_end_time = now_time + timedelta(hours=2)       # ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏≠‡∏µ‡∏Å 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        
        print(f"üß™ Testing times:")
        print(f"   Start: {testing_start_time}")
        print(f"   End: {testing_end_time}")
        print(f"   Expiry: {qr_expiry_time}")
        
        # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        exam_start_time = testing_start_time
        exam_end_time = testing_end_time
    else:
        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏© 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö (‡∏Å‡∏£‡∏ì‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥)
        qr_expiry_time = exam_end_time + timedelta(minutes=30)
    
    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ QR Code
    is_expired = now_time > qr_expiry_time
    can_use_early = now_time >= (exam_start_time - timedelta(minutes=30))
    
    print(f"üïê Current: {now_time}")
    print(f"üïë Exam start: {exam_start_time}")
    print(f"üïí Exam end: {exam_end_time}")
    print(f"üïì QR expiry: {qr_expiry_time}")
    print(f"‚ùì Is expired: {is_expired}")
    print(f"‚ùì Can use early: {can_use_early}")
    print(f"üß™ Is past exam (testing mode): {is_past_exam}")
    
    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    if now_time > exam_end_time:
        time_since_exam = now_time - exam_end_time
        print(f"‚è±Ô∏è Time since exam ended: {time_since_exam}")
    else:
        time_until_exam = exam_start_time - now_time
        print(f"‚è±Ô∏è Time until exam starts: {time_until_exam}")
    
    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    if now_time < qr_expiry_time:
        time_remaining_seconds = (qr_expiry_time - now_time).total_seconds()
    else:
        time_remaining_seconds = 0
    
    print(f"‚è≥ Time remaining (seconds): {time_remaining_seconds}")
    
    context = {
        "subject": subject,
        "img_base64": img_base64,
        "qr_url": qr_url,
        "current_time": now_time,
        "exam_start_time": exam_start_time,
        "exam_end_time": exam_end_time,
        "qr_expiry_time": qr_expiry_time,
        "is_expired": is_expired,
        "can_use_early": can_use_early,
        "time_remaining": time_remaining_seconds,
        "is_past_exam": is_past_exam,  # ‡∏™‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
    }

    return render(request, "app/staff/qr_code.html", context)

@csrf_exempt
@login_required
def confirm_exam_entry(request):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô QR Code - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç error"""
    
    if request.method == "GET":
        subject_id = request.GET.get("subject_id")
        timestamp = request.GET.get("t")
        
        if not subject_id:
            return render(request, "app/error.html", {
                "message": "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤"
            })
        
        try:
            subject = get_object_or_404(ExamSubject, id=subject_id)
            
            # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤
            thai_tz = pytz.timezone('Asia/Bangkok')
            now = timezone.now().astimezone(thai_tz)
            
            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á datetime ‡∏à‡∏≤‡∏Å date + time ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏õ‡∏•‡∏á timezone
            try:
                if hasattr(subject.end_time, 'astimezone'):
                    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô datetime object ‡πÅ‡∏•‡πâ‡∏ß
                    exam_end_time = subject.end_time.astimezone(thai_tz)
                else:
                    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô time object ‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö exam_date
                    naive_end = datetime.combine(subject.exam_date, subject.end_time)
                    exam_end_time = thai_tz.localize(naive_end)
                
                if hasattr(subject.start_time, 'astimezone'):
                    exam_start_time = subject.start_time.astimezone(thai_tz)
                else:
                    naive_start = datetime.combine(subject.exam_date, subject.start_time)
                    exam_start_time = thai_tz.localize(naive_start)
                    
            except Exception as e:
                print(f"‚ùå Time conversion error: {e}")
                return render(request, "app/staff/error.html", {
                    "message": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤: {str(e)}"
                })
            
            qr_expiry_time = exam_end_time + timedelta(minutes=30)
            
            if now > qr_expiry_time:
                return render(request, "app/staff/qr_expired.html", {
                    "subject": subject,
                    "message": "QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ"
                })
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            check_in_start = exam_start_time - timedelta(minutes=30)
            
            if now < check_in_start:
                return render(request, "app/staff/qr_too_early.html", {
                    "subject": subject,
                    "check_in_time": check_in_start,
                    "message": f"‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏à‡∏ô‡∏ñ‡∏∂‡∏á {check_in_start.strftime('%H:%M')} ‡∏ô."
                })
            
            # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            student, teacher, seat_number = None, None, None
            
            if request.user.is_student:
                try:
                    student = StudentProfile.objects.get(user=request.user)
                    
                    if not subject.students.filter(id=student.id).exists():
                        return render(request, "app/staff/qr_not_registered.html", {
                            "subject": subject,
                            "message": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ"
                        })
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
                    students = list(subject.students.order_by('student_class', 'user__last_name'))
                    for idx, s in enumerate(students, start=1):
                        if s.user.id == request.user.id:
                            seat_number = idx
                            break
                    
                except StudentProfile.DoesNotExist:
                    return render(request, "app/staff/error.html", {
                        "message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
                    })
                    
            elif request.user.is_teacher:
                try:
                    teacher = TeacherProfile.objects.get(user=request.user)
                    
                    if (teacher.id != subject.invigilator_id and 
                        teacher.id != getattr(subject.secondary_invigilator, 'id', None)):
                        return render(request, "app/staff/qr_unauthorized.html", {
                            "subject": subject,
                            "message": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏£‡∏π‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ"
                        })
                        
                except TeacherProfile.DoesNotExist:
                    return render(request, "app/staff/error.html", {
                        "message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏π"
                    })
            
            context = {
                "subject": subject,
                "student": student,
                "teacher": teacher,
                "seat_number": seat_number,
                "current_time": now,
                "exam_start_time": exam_start_time,
                "exam_end_time": exam_end_time,
                "can_check_in": check_in_start <= now <= qr_expiry_time,
            }
            
            return render(request, "app/staff/confirm_exam.html", context)
            
        except Exception as e:
            print(f"‚ùå General error: {str(e)}")
            return render(request, "app/staff/error.html", {
                "message": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
            })
    
    elif request.method == "POST":
        try:
            data = json.loads(request.body)
            subject_id = data.get("subject_id")
            
            if not subject_id:
                return JsonResponse({"status": "error", "message": "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ subject_id"}, status=400)
            
            subject = get_object_or_404(ExamSubject, id=subject_id)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            thai_tz = pytz.timezone('Asia/Bangkok')
            now = timezone.now().astimezone(thai_tz)
            
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
            try:
                if hasattr(subject.end_time, 'astimezone'):
                    exam_end_time = subject.end_time.astimezone(thai_tz)
                else:
                    naive_end = datetime.combine(subject.exam_date, subject.end_time)
                    exam_end_time = thai_tz.localize(naive_end)
                    
                qr_expiry_time = exam_end_time + timedelta(minutes=30)
                
            except Exception as e:
                return JsonResponse({
                    "status": "error", 
                    "message": f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤: {str(e)}"
                }, status=500)
            
            if now > qr_expiry_time:
                return JsonResponse({
                    "status": "error", 
                    "message": "‚ùå QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ"
                }, status=400)
            
            # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
            if request.user.is_student:
                student = get_object_or_404(StudentProfile, user=request.user)
                
                existing_attendance = Attendance.objects.filter(
                    student=student, 
                    subject=subject
                ).first()
                
                if existing_attendance:
                    return JsonResponse({
                        "status": "info",
                        "message": f"‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ {existing_attendance.checkin_time.strftime('%H:%M')} ‡∏ô.",
                        "already_checked": True
                    })
                
                attendance = Attendance.objects.create(
                    student=student,
                    subject=subject,
                    status="on_time",
                    checkin_time=now
                )
                
                return JsonResponse({
                    "status": "success",
                    "message": "‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
                    "checkin_time": now.strftime('%H:%M'),
                    "seat_number": getattr(student, 'seat_number', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
                })
                
            elif request.user.is_teacher:
                teacher = get_object_or_404(TeacherProfile, user=request.user)
                
                if teacher.id == subject.invigilator_id:
                    if subject.invigilator_checkin:
                        return JsonResponse({
                            "status": "info",
                            "message": "‚úÖ ‡∏Ñ‡∏£‡∏π‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß",
                            "already_checked": True
                        })
                    
                    subject.invigilator_checkin = True
                    subject.invigilator_checkin_time = now
                    subject.save()
                    
                    return JsonResponse({
                        "status": "success",
                        "message": "‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏π‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
                        "position": "main"
                    })
                    
                elif teacher.id == getattr(subject.secondary_invigilator, 'id', None):
                    if subject.secondary_invigilator_checkin:
                        return JsonResponse({
                            "status": "info",
                            "message": "‚úÖ ‡∏Ñ‡∏£‡∏π‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß",
                            "already_checked": True
                        })
                    
                    subject.secondary_invigilator_checkin = True
                    subject.secondary_invigilator_checkin_time = now
                    subject.save()
                    
                    return JsonResponse({
                        "status": "success",
                        "message": "‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏π‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
                        "position": "secondary"
                    })
                
                else:
                    return JsonResponse({
                        "status": "error",
                        "message": "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏£‡∏π‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ"
                    }, status=403)
            
            else:
                return JsonResponse({
                    "status": "error",
                    "message": "‚ùå ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
                }, status=403)
                
        except json.JSONDecodeError:
            return JsonResponse({
                "status": "error",
                "message": "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
            }, status=400)
        except Exception as e:
            print(f"‚ùå POST error: {str(e)}")
            return JsonResponse({
                "status": "error",
                "message": f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
            }, status=500)
    
    return JsonResponse({
        "status": "error",
        "message": "‚ùå Method ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
    }, status=405)


# ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ QR Code
@login_required
def check_qr_status(request, subject_id):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ QR Code ‡πÅ‡∏ö‡∏ö Real-time"""
    try:
        subject = get_object_or_404(ExamSubject, id=subject_id)
        
        thai_tz = pytz.timezone('Asia/Bangkok')
        now = timezone.now().astimezone(thai_tz)
        exam_start = subject.start_time.astimezone(thai_tz)
        exam_end = subject.end_time.astimezone(thai_tz)
        qr_expiry = exam_end + timedelta(minutes=30)
        check_in_start = exam_start - timedelta(minutes=30)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if now < check_in_start:
            status = "too_early"
            message = f"‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ (‡πÄ‡∏£‡∏¥‡πà‡∏° {check_in_start.strftime('%H:%M')} ‡∏ô.)"
        elif now > qr_expiry:
            status = "expired"
            message = "QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß"
        elif exam_start <= now <= exam_end:
            status = "exam_ongoing"
            message = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≠‡∏ö - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ"
        elif check_in_start <= now < exam_start:
            status = "check_in_open"
            message = "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß"
        elif exam_end < now <= qr_expiry:
            status = "post_exam"
            message = "‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≠‡∏ö - ‡∏¢‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ"
        else:
            status = "unknown"
            message = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö"
        
        return JsonResponse({
            "status": status,
            "message": message,
            "current_time": now.strftime('%H:%M:%S'),
            "exam_start": exam_start.strftime('%H:%M'),
            "exam_end": exam_end.strftime('%H:%M'),
            "qr_expiry": qr_expiry.strftime('%H:%M'),
            "can_use": status in ["check_in_open", "exam_ongoing", "post_exam"],
            "time_remaining": max(0, (qr_expiry - now).total_seconds())
        })
        
    except Exception as e:
        return JsonResponse({
            "status": "error",
            "message": str(e)
        }, status=500)

@csrf_exempt
@login_required
def confirm_exam_checkin(request):
    if request.method == "POST":
        data = json.loads(request.body)
        student_id = data.get("student_id")
        subject_id = data.get("subject_id")

        student = get_object_or_404(StudentProfile, id=student_id)
        subject = get_object_or_404(ExamSubject, id=subject_id)

        if request.user != student.user:
            return JsonResponse({"status": "error", "message": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ"}, status=403)

        Attendance.objects.create(student=student, subject=subject, status="on_time")

        return JsonResponse({"status": "success", "message": "‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"})

    return JsonResponse({"status": "error", "message": "Method Not Allowed"}, status=405)

@login_required
def exam_attendance_status(request, subject_id):
    subject = get_object_or_404(ExamSubject, id=subject_id)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if request.user.is_staff:
        pass  # staff ‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤
    elif request.user.is_teacher:
        teacher_profile = getattr(request.user, 'teacher_profile', None)
        # ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏π‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π‡πÑ‡∏î‡πâ (‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏î‡∏π‡πÑ‡∏î‡πâ)
        if not teacher_profile or subject.invigilator != teacher_profile:
            return HttpResponseForbidden("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ")
    else:
        return HttpResponseForbidden("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ")

    # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á subject ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    subject.refresh_from_db()

    # ‡∏î‡∏∂‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ
    students = subject.students.all()

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
    attendance_records = Attendance.objects.filter(subject=subject)
    attendance_dict = {att.student.id: att for att in attendance_records}

    return render(request, 'app/staff/exam_attendance_status.html', {
        'subject': subject,
        'students': students,
        'attendance_dict': attendance_dict,
        # ‡∏™‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏π‡∏™‡∏≥‡∏£‡∏≠‡∏á
        'primary_teacher_checked_in': subject.invigilator_checkin,
        'secondary_teacher_checked_in': subject.secondary_invigilator_checkin,
    })

@login_required
def update_attendance_status(request):
    """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≤‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏™‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ """
    subjects = ExamSubject.objects.all()
    current_time = now()
    attendance_status = {}

    for subject in subjects:
        exam_start_time = subject.start_time
        late_threshold = exam_start_time + timedelta(minutes=30)

        # ‡∏î‡∏∂‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
        absent_students = Attendance.objects.filter(subject=subject, checkin_time__isnull=True)
        for record in absent_students:
            if current_time > exam_start_time:
                record.status = "absent"
            attendance_status[str(record.student.id)] = record.status

        # ‡∏î‡∏∂‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏™‡∏≤‡∏¢
        late_students = Attendance.objects.filter(subject=subject, checkin_time__gt=exam_start_time, checkin_time__lte=late_threshold)
        for record in late_students:
            record.status = "late"
            attendance_status[str(record.student.id)] = record.status

        Attendance.objects.bulk_update(absent_students, ['status'])
        Attendance.objects.bulk_update(late_students, ['status'])

    return JsonResponse({"status": "success", "attendance_status": attendance_status})


@csrf_exempt
def manual_checkin(request):
    """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô """
    if request.method == "POST":
        data = json.loads(request.body)
        student_id = data.get("student_id")
        subject_id = data.get("subject_id")
        status = data.get("status")  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Modal

        student = get_object_or_404(StudentProfile, id=student_id)
        subject = get_object_or_404(ExamSubject, id=subject_id)

        attendance, created = Attendance.objects.get_or_create(student=student, subject=subject)
        attendance.checkin_time = now()
        attendance.status = status  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å Modal

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        color_map = {
            "on_time": "#16a34a",  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            "late": "#facc15",  # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
            "absent": "#dc2626",  # ‡πÅ‡∏î‡∏á
        }
        color = color_map.get(status, "#d1d5db")  # Default ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤

        attendance.save()
        return JsonResponse({"status": "success", "color": color})

    return JsonResponse({"status": "error"}, status=400)

##################################################################################################################################################################
@login_required
def dashboard_teacher(request):
    user = request.user

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏π‡∏à‡∏£‡∏¥‡∏á
    try:
        teacher_profile = TeacherProfile.objects.get(user=user)
    except TeacherProfile.DoesNotExist:
        teacher_profile = None

    if not teacher_profile:
        return render(request, 'app/error.html', {'message': '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏π'})

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏π‡∏î‡∏π‡πÅ‡∏•
    subjects = ExamSubject.objects.filter(invigilator=teacher_profile)
    subject_count = subjects.count()

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏π‡∏î‡∏π‡πÅ‡∏• (‡πÉ‡∏ä‡πâ `distinct()` ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥)
    student_count = StudentProfile.objects.filter(exam_subjects__in=subjects).distinct().count()

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏π
    exam_checkins = Attendance.objects.filter(subject__in=subjects).count()

    return render(request, 'app/teacher/dashboard_teacher.html', {
        'subject_count': subject_count,
        'student_count': student_count,
        'exam_checkins': exam_checkins
    })

@csrf_exempt
@login_required
def teacher_checkin(request):
    """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏π‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ """
    if request.method == "POST":
        data = json.loads(request.body)
        subject_id = data.get("subject_id")
        subject = get_object_or_404(ExamSubject, id=subject_id)

        if request.user.teacher_profile != subject.invigilator:
            return JsonResponse({"status": "error", "message": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ"})

        # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏π
        subject.invigilator_checkin = True
        subject.save()

        # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏π‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "on_time"
        attendance, created = Attendance.objects.get_or_create(student=None, subject=subject)
        attendance.status = "on_time"  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏π‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô
        attendance.save()

        return JsonResponse({"status": "success"})

@csrf_exempt
@login_required
def confirm_exam_entry_teacher(request):
    if request.method == "POST":
        try:
            if request.content_type == "application/json":
                data = json.loads(request.body)
                subject_id = data.get("subject_id")
                new_status = data.get("status")
            else:
                subject_id = request.POST.get("subject_id")
                new_status = request.POST.get("status")
            
            if not subject_id:
                return JsonResponse({"status": "error", "message": "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ subject_id"}, status=400)
            
            subject = get_object_or_404(ExamSubject, id=subject_id)
            teacher = TeacherProfile.objects.filter(user=request.user).first()
            
            if not teacher:
                return JsonResponse({"status": "error", "message": "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏£‡∏π"}, status=404)
            
            if teacher.id != subject.invigilator_id and teacher.id != subject.secondary_invigilator_id:
                return JsonResponse({"status": "error", "message": "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏£‡∏π‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ"}, status=403)
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            if teacher.id == subject.invigilator_id:
                if new_status == "on_time":
                    subject.invigilator_checkin = True
                    subject.invigilator_checkin_time = now()
                else:
                    subject.invigilator_checkin = False
                    subject.invigilator_checkin_time = None
                position = "main"
            elif teacher.id == subject.secondary_invigilator_id:
                if new_status == "on_time":
                    subject.secondary_invigilator_checkin = True
                    subject.secondary_invigilator_checkin_time = now()
                else:
                    subject.secondary_invigilator_checkin = False
                    subject.secondary_invigilator_checkin_time = None
                position = "secondary"
            
            subject.save()
            return JsonResponse({"status": "success", "message": "‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!", "position": position})
        except Exception as e:
            return JsonResponse({"status": "error", "message": f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}, status=500)
    return JsonResponse({"status": "error", "message": "‚ùå Method Not Allowed"}, status=405)



@login_required
def exam_subjects_teacher(request):
    user = request.user

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏π‡∏à‡∏£‡∏¥‡∏á
    try:
        teacher_profile = TeacherProfile.objects.get(user=user)
    except TeacherProfile.DoesNotExist:
        return render(request, 'app/error.html', {'message': '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏π'})

    # ‡∏î‡∏∂‡∏á‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏π
    school_name = teacher_profile.user.school_name

    # ‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏π‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á)
    all_classes = ExamSubject.objects.filter(
        Q(invigilator=teacher_profile) | Q(secondary_invigilator=teacher_profile)
    ).values_list("students__student_class", flat=True).distinct()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÑ‡∏´‡∏°
    selected_class = request.GET.get("student_class", "all")

    # ‡∏î‡∏∂‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏π‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏π‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏π‡∏£‡∏≠‡∏á
    subjects = ExamSubject.objects.filter(
        Q(invigilator=teacher_profile) | Q(secondary_invigilator=teacher_profile)
    )

    if selected_class != "all":
        subjects = subjects.filter(students__student_class=selected_class)

    subjects = subjects.distinct()

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô set (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥)
    for subject in subjects:
        subject.student_classes = set(subject.students.values_list('student_class', flat=True))

    return render(request, "app/teacher/exam_subjects_teacher.html", {
        "subjects": subjects,
        "all_classes": all_classes,
        "selected_class": selected_class,
        "school_name": school_name
    })

@login_required
def teacher_check_student(request):
    """
    ‚úÖ ‡∏Ñ‡∏£‡∏π‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö
    ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `teacher_profile` ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ `teacher_profile` ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    """
    teacher_profile = getattr(request.user, 'teacher_profile', None)

    if not teacher_profile:
        return HttpResponseForbidden("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏£‡∏π ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")

    # ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏π‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö
    subjects = ExamSubject.objects.filter(invigilator=teacher_profile)

    # ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤
    subject_data = []
    for subject in subjects:
        student_classes = list(set(subject.students.values_list('student_class', flat=True)))  # ‡πÉ‡∏ä‡πâ set() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥
        subject_data.append({
            "subject": subject,
            "student_classes": student_classes
        })

    return render(request, 'app/teacher/teacher_check_student.html', {
        'subject_data': subject_data
    })

@csrf_exempt
@login_required
def manual_teacher_checkin(request):
    """
    View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á
    """
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            teacher_id = data.get("teacher_id")
            subject_id = data.get("subject_id")
            status = data.get("status")  # ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô "on_time" ‡∏´‡∏£‡∏∑‡∏≠ "absent"
            
            teacher = get_object_or_404(TeacherProfile, id=teacher_id)
            subject = get_object_or_404(ExamSubject, id=subject_id)

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ teacher ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏π‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ
            if teacher.id != subject.invigilator_id and teacher.id != subject.secondary_invigilator_id:
                return JsonResponse({"status": "error", "message": "‚ùå ‡∏Ñ‡∏£‡∏π‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏£‡∏π‡∏Ñ‡∏∏‡∏°‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ"}, status=403)

            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            if teacher.id == subject.invigilator_id:
                subject.invigilator_checkin = True if status == "on_time" else False
                position = "main"
            else:
                subject.secondary_invigilator_checkin = True if status == "on_time" else False
                position = "secondary"
            subject.save()

            return JsonResponse({"status": "success", "position": position})
        except json.JSONDecodeError:
            return JsonResponse({"status": "error", "message": "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}, status=400)
        except Exception as e:
            return JsonResponse({"status": "error", "message": f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}, status=500)

    return JsonResponse({"status": "error", "message": "‚ùå Method Not Allowed"}, status=405)

##################################################################################################################################################################
@login_required
def dashboard_student(request):
    if not request.user.is_student:
        return HttpResponseForbidden("‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
    student_profile = get_object_or_404(StudentProfile, user=request.user)
    
    # ‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á (exam_date >= ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
    today = now().date()
    upcoming_exams = ExamSubject.objects.filter(students=student_profile, exam_date__gte=today).order_by('exam_date')
    
    # ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ
    exam_history = Attendance.objects.filter(student=student_profile).order_by('-checkin_time')
    
    context = {
        'upcoming_exams': upcoming_exams,
        'exam_history': exam_history,
    }
    return render(request, 'app/student/dashboard_student.html', context)

# 1. ‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
@login_required
def exam_schedule(request):
    if not request.user.is_student:
        return HttpResponseForbidden("‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
    student_profile = get_object_or_404(StudentProfile, user=request.user)
    subjects = ExamSubject.objects.filter(students=student_profile).order_by('exam_date')
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤
    for subject in subjects:
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        students = list(subject.students.order_by('student_class', 'user__last_name'))
        for idx, student in enumerate(students, start=1):
            if student.user.id == request.user.id:
                subject.seat_number = idx
                break
                
    return render(request, 'app/student/exam_schedule.html', {'subjects': subjects})


# 2. ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö
@login_required
def exam_history(request):
    if not request.user.is_student:
        return HttpResponseForbidden("‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
    student_profile = get_object_or_404(StudentProfile, user=request.user)
    attendance_records = Attendance.objects.filter(student=student_profile).order_by('-checkin_time')
    return render(request, 'app/student/exam_history.html', {'attendance_records': attendance_records})

# 3. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô)
@login_required
def update_profile(request):
    if not request.user.is_student:
        return HttpResponseForbidden("‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
    user_instance = request.user
    student_profile = get_object_or_404(StudentProfile, user=user_instance)
    if request.method == 'POST':
        user_form = UserProfileEditForm(request.POST, instance=user_instance)
        profile_form = StudentProfileEditForm(request.POST, instance=student_profile)
        if user_form.is_valid() and profile_form.is_valid():
            user_form.save()
            profile_form.save()
            messages.success(request, "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            return redirect('dashboard_student')
        else:
            messages.error(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å")
    else:
        user_form = UserProfileEditForm(instance=user_instance)
        profile_form = StudentProfileEditForm(instance=student_profile)
    return render(request, 'app/student/update_profile.html', {
        'user_form': user_form,
        'profile_form': profile_form
    })

